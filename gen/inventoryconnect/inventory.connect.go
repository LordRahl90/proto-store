// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory.proto

package inventoryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	inventory "github.com/LordRahl90/commerce/inventory"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InventoryName is the fully-qualified name of the Inventory service.
	InventoryName = "inventory.Inventory"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryGetProcedure is the fully-qualified name of the Inventory's Get RPC.
	InventoryGetProcedure = "/inventory.Inventory/Get"
	// InventoryCreateProcedure is the fully-qualified name of the Inventory's Create RPC.
	InventoryCreateProcedure = "/inventory.Inventory/Create"
	// InventoryUpdateProcedure is the fully-qualified name of the Inventory's Update RPC.
	InventoryUpdateProcedure = "/inventory.Inventory/Update"
	// InventoryDeleteProcedure is the fully-qualified name of the Inventory's Delete RPC.
	InventoryDeleteProcedure = "/inventory.Inventory/Delete"
	// InventoryListProcedure is the fully-qualified name of the Inventory's List RPC.
	InventoryListProcedure = "/inventory.Inventory/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inventoryServiceDescriptor      = inventory.File_inventory_proto.Services().ByName("Inventory")
	inventoryGetMethodDescriptor    = inventoryServiceDescriptor.Methods().ByName("Get")
	inventoryCreateMethodDescriptor = inventoryServiceDescriptor.Methods().ByName("Create")
	inventoryUpdateMethodDescriptor = inventoryServiceDescriptor.Methods().ByName("Update")
	inventoryDeleteMethodDescriptor = inventoryServiceDescriptor.Methods().ByName("Delete")
	inventoryListMethodDescriptor   = inventoryServiceDescriptor.Methods().ByName("List")
)

// InventoryClient is a client for the inventory.Inventory service.
type InventoryClient interface {
	Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.Item], error)
	Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.Item], error)
	Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.Item], error)
	Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.Item], error)
	List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error)
}

// NewInventoryClient constructs a client for the inventory.Inventory service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InventoryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryClient{
		get: connect.NewClient[inventory.GetRequest, inventory.Item](
			httpClient,
			baseURL+InventoryGetProcedure,
			connect.WithSchema(inventoryGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[inventory.CreateRequest, inventory.Item](
			httpClient,
			baseURL+InventoryCreateProcedure,
			connect.WithSchema(inventoryCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[inventory.UpdateRequest, inventory.Item](
			httpClient,
			baseURL+InventoryUpdateProcedure,
			connect.WithSchema(inventoryUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[inventory.DeleteRequest, inventory.Item](
			httpClient,
			baseURL+InventoryDeleteProcedure,
			connect.WithSchema(inventoryDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[inventory.ListRequest, inventory.ListResponse](
			httpClient,
			baseURL+InventoryListProcedure,
			connect.WithSchema(inventoryListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inventoryClient implements InventoryClient.
type inventoryClient struct {
	get    *connect.Client[inventory.GetRequest, inventory.Item]
	create *connect.Client[inventory.CreateRequest, inventory.Item]
	update *connect.Client[inventory.UpdateRequest, inventory.Item]
	delete *connect.Client[inventory.DeleteRequest, inventory.Item]
	list   *connect.Client[inventory.ListRequest, inventory.ListResponse]
}

// Get calls inventory.Inventory.Get.
func (c *inventoryClient) Get(ctx context.Context, req *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.Item], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls inventory.Inventory.Create.
func (c *inventoryClient) Create(ctx context.Context, req *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.Item], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls inventory.Inventory.Update.
func (c *inventoryClient) Update(ctx context.Context, req *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.Item], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls inventory.Inventory.Delete.
func (c *inventoryClient) Delete(ctx context.Context, req *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.Item], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls inventory.Inventory.List.
func (c *inventoryClient) List(ctx context.Context, req *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// InventoryHandler is an implementation of the inventory.Inventory service.
type InventoryHandler interface {
	Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.Item], error)
	Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.Item], error)
	Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.Item], error)
	Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.Item], error)
	List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error)
}

// NewInventoryHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryHandler(svc InventoryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inventoryGetHandler := connect.NewUnaryHandler(
		InventoryGetProcedure,
		svc.Get,
		connect.WithSchema(inventoryGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryCreateHandler := connect.NewUnaryHandler(
		InventoryCreateProcedure,
		svc.Create,
		connect.WithSchema(inventoryCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryUpdateHandler := connect.NewUnaryHandler(
		InventoryUpdateProcedure,
		svc.Update,
		connect.WithSchema(inventoryUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryDeleteHandler := connect.NewUnaryHandler(
		InventoryDeleteProcedure,
		svc.Delete,
		connect.WithSchema(inventoryDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryListHandler := connect.NewUnaryHandler(
		InventoryListProcedure,
		svc.List,
		connect.WithSchema(inventoryListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.Inventory/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryGetProcedure:
			inventoryGetHandler.ServeHTTP(w, r)
		case InventoryCreateProcedure:
			inventoryCreateHandler.ServeHTTP(w, r)
		case InventoryUpdateProcedure:
			inventoryUpdateHandler.ServeHTTP(w, r)
		case InventoryDeleteProcedure:
			inventoryDeleteHandler.ServeHTTP(w, r)
		case InventoryListProcedure:
			inventoryListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryHandler struct{}

func (UnimplementedInventoryHandler) Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.Item], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.Inventory.Get is not implemented"))
}

func (UnimplementedInventoryHandler) Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.Item], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.Inventory.Create is not implemented"))
}

func (UnimplementedInventoryHandler) Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.Item], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.Inventory.Update is not implemented"))
}

func (UnimplementedInventoryHandler) Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.Item], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.Inventory.Delete is not implemented"))
}

func (UnimplementedInventoryHandler) List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.Inventory.List is not implemented"))
}
