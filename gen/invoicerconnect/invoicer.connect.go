// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: invoicer.proto

package invoicerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	invoicer "github.com/LordRahl90/invoicer"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InvoicerName is the fully-qualified name of the Invoicer service.
	InvoicerName = "invoicer.Invoicer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InvoicerCreateProcedure is the fully-qualified name of the Invoicer's Create RPC.
	InvoicerCreateProcedure = "/invoicer.Invoicer/Create"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	invoicerServiceDescriptor      = invoicer.File_invoicer_proto.Services().ByName("Invoicer")
	invoicerCreateMethodDescriptor = invoicerServiceDescriptor.Methods().ByName("Create")
)

// InvoicerClient is a client for the invoicer.Invoicer service.
type InvoicerClient interface {
	Create(context.Context, *connect.Request[invoicer.Invoice]) (*connect.Response[invoicer.Response], error)
}

// NewInvoicerClient constructs a client for the invoicer.Invoicer service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInvoicerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InvoicerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &invoicerClient{
		create: connect.NewClient[invoicer.Invoice, invoicer.Response](
			httpClient,
			baseURL+InvoicerCreateProcedure,
			connect.WithSchema(invoicerCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// invoicerClient implements InvoicerClient.
type invoicerClient struct {
	create *connect.Client[invoicer.Invoice, invoicer.Response]
}

// Create calls invoicer.Invoicer.Create.
func (c *invoicerClient) Create(ctx context.Context, req *connect.Request[invoicer.Invoice]) (*connect.Response[invoicer.Response], error) {
	return c.create.CallUnary(ctx, req)
}

// InvoicerHandler is an implementation of the invoicer.Invoicer service.
type InvoicerHandler interface {
	Create(context.Context, *connect.Request[invoicer.Invoice]) (*connect.Response[invoicer.Response], error)
}

// NewInvoicerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInvoicerHandler(svc InvoicerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	invoicerCreateHandler := connect.NewUnaryHandler(
		InvoicerCreateProcedure,
		svc.Create,
		connect.WithSchema(invoicerCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/invoicer.Invoicer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InvoicerCreateProcedure:
			invoicerCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInvoicerHandler returns CodeUnimplemented from all methods.
type UnimplementedInvoicerHandler struct{}

func (UnimplementedInvoicerHandler) Create(context.Context, *connect.Request[invoicer.Invoice]) (*connect.Response[invoicer.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invoicer.Invoicer.Create is not implemented"))
}
