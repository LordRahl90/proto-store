// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/inventory.proto

package inventoryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	inventory "github.com/LordRahl90/commerce/inventory"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InventoryServiceName is the fully-qualified name of the InventoryService service.
	InventoryServiceName = "inventory.v1.InventoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryServiceGetProcedure is the fully-qualified name of the InventoryService's Get RPC.
	InventoryServiceGetProcedure = "/inventory.v1.InventoryService/Get"
	// InventoryServiceCreateProcedure is the fully-qualified name of the InventoryService's Create RPC.
	InventoryServiceCreateProcedure = "/inventory.v1.InventoryService/Create"
	// InventoryServiceUpdateProcedure is the fully-qualified name of the InventoryService's Update RPC.
	InventoryServiceUpdateProcedure = "/inventory.v1.InventoryService/Update"
	// InventoryServiceDeleteProcedure is the fully-qualified name of the InventoryService's Delete RPC.
	InventoryServiceDeleteProcedure = "/inventory.v1.InventoryService/Delete"
	// InventoryServiceListProcedure is the fully-qualified name of the InventoryService's List RPC.
	InventoryServiceListProcedure = "/inventory.v1.InventoryService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inventoryServiceServiceDescriptor      = inventory.File_v1_inventory_proto.Services().ByName("InventoryService")
	inventoryServiceGetMethodDescriptor    = inventoryServiceServiceDescriptor.Methods().ByName("Get")
	inventoryServiceCreateMethodDescriptor = inventoryServiceServiceDescriptor.Methods().ByName("Create")
	inventoryServiceUpdateMethodDescriptor = inventoryServiceServiceDescriptor.Methods().ByName("Update")
	inventoryServiceDeleteMethodDescriptor = inventoryServiceServiceDescriptor.Methods().ByName("Delete")
	inventoryServiceListMethodDescriptor   = inventoryServiceServiceDescriptor.Methods().ByName("List")
)

// InventoryServiceClient is a client for the inventory.v1.InventoryService service.
type InventoryServiceClient interface {
	Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.GetResponse], error)
	Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.CreateResponse], error)
	Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.UpdateResponse], error)
	Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.DeleteResponse], error)
	List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error)
}

// NewInventoryServiceClient constructs a client for the inventory.v1.InventoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InventoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryServiceClient{
		get: connect.NewClient[inventory.GetRequest, inventory.GetResponse](
			httpClient,
			baseURL+InventoryServiceGetProcedure,
			connect.WithSchema(inventoryServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[inventory.CreateRequest, inventory.CreateResponse](
			httpClient,
			baseURL+InventoryServiceCreateProcedure,
			connect.WithSchema(inventoryServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[inventory.UpdateRequest, inventory.UpdateResponse](
			httpClient,
			baseURL+InventoryServiceUpdateProcedure,
			connect.WithSchema(inventoryServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[inventory.DeleteRequest, inventory.DeleteResponse](
			httpClient,
			baseURL+InventoryServiceDeleteProcedure,
			connect.WithSchema(inventoryServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[inventory.ListRequest, inventory.ListResponse](
			httpClient,
			baseURL+InventoryServiceListProcedure,
			connect.WithSchema(inventoryServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inventoryServiceClient implements InventoryServiceClient.
type inventoryServiceClient struct {
	get    *connect.Client[inventory.GetRequest, inventory.GetResponse]
	create *connect.Client[inventory.CreateRequest, inventory.CreateResponse]
	update *connect.Client[inventory.UpdateRequest, inventory.UpdateResponse]
	delete *connect.Client[inventory.DeleteRequest, inventory.DeleteResponse]
	list   *connect.Client[inventory.ListRequest, inventory.ListResponse]
}

// Get calls inventory.v1.InventoryService.Get.
func (c *inventoryServiceClient) Get(ctx context.Context, req *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls inventory.v1.InventoryService.Create.
func (c *inventoryServiceClient) Create(ctx context.Context, req *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls inventory.v1.InventoryService.Update.
func (c *inventoryServiceClient) Update(ctx context.Context, req *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls inventory.v1.InventoryService.Delete.
func (c *inventoryServiceClient) Delete(ctx context.Context, req *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls inventory.v1.InventoryService.List.
func (c *inventoryServiceClient) List(ctx context.Context, req *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// InventoryServiceHandler is an implementation of the inventory.v1.InventoryService service.
type InventoryServiceHandler interface {
	Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.GetResponse], error)
	Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.CreateResponse], error)
	Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.UpdateResponse], error)
	Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.DeleteResponse], error)
	List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error)
}

// NewInventoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryServiceHandler(svc InventoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inventoryServiceGetHandler := connect.NewUnaryHandler(
		InventoryServiceGetProcedure,
		svc.Get,
		connect.WithSchema(inventoryServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceCreateHandler := connect.NewUnaryHandler(
		InventoryServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(inventoryServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceUpdateHandler := connect.NewUnaryHandler(
		InventoryServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(inventoryServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceDeleteHandler := connect.NewUnaryHandler(
		InventoryServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(inventoryServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceListHandler := connect.NewUnaryHandler(
		InventoryServiceListProcedure,
		svc.List,
		connect.WithSchema(inventoryServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.InventoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryServiceGetProcedure:
			inventoryServiceGetHandler.ServeHTTP(w, r)
		case InventoryServiceCreateProcedure:
			inventoryServiceCreateHandler.ServeHTTP(w, r)
		case InventoryServiceUpdateProcedure:
			inventoryServiceUpdateHandler.ServeHTTP(w, r)
		case InventoryServiceDeleteProcedure:
			inventoryServiceDeleteHandler.ServeHTTP(w, r)
		case InventoryServiceListProcedure:
			inventoryServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryServiceHandler struct{}

func (UnimplementedInventoryServiceHandler) Get(context.Context, *connect.Request[inventory.GetRequest]) (*connect.Response[inventory.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.Get is not implemented"))
}

func (UnimplementedInventoryServiceHandler) Create(context.Context, *connect.Request[inventory.CreateRequest]) (*connect.Response[inventory.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.Create is not implemented"))
}

func (UnimplementedInventoryServiceHandler) Update(context.Context, *connect.Request[inventory.UpdateRequest]) (*connect.Response[inventory.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.Update is not implemented"))
}

func (UnimplementedInventoryServiceHandler) Delete(context.Context, *connect.Request[inventory.DeleteRequest]) (*connect.Response[inventory.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.Delete is not implemented"))
}

func (UnimplementedInventoryServiceHandler) List(context.Context, *connect.Request[inventory.ListRequest]) (*connect.Response[inventory.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.List is not implemented"))
}
